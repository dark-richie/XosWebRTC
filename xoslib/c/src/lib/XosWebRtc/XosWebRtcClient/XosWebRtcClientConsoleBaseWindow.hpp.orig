///////////////////////////////////////////////////////////////////////
/// Copyright 2012, Google Inc.
///
/// Redistribution and use in source and binary forms, with or without
/// modification, are permitted provided that the following conditions are met:
/// 
///  1. Redistributions of source code must retain the above copyright notice,
///     this list of conditions and the following disclaimer.
///  2. Redistributions in binary form must reproduce the above copyright notice,
///     this list of conditions and the following disclaimer in the documentation
///     and/or other materials provided with the distribution.
///  3. The name of the author may not be used to endorse or promote products
///     derived from this software without specific prior written permission.
/// 
/// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
/// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
/// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
/// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
/// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
/// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
/// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
/// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
/// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
/// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///
///   File: XosWebRtcClientConsoleBaseWindow.hpp
///
/// Author: $author$
///   Date: 12/29/2012
///////////////////////////////////////////////////////////////////////
#ifndef _XOSWEBRTCCLIENTCONSOLEBASEWINDOW_HPP
#define _XOSWEBRTCCLIENTCONSOLEBASEWINDOW_HPP

#include "XosWebRtcClientBaseWindow.hpp"
#include "XosWebRtcClientConsoleBaseWindowPeerImplement.hpp"
#include "XosWebRtcClientConsoleBaseWindowUIMessageThread.hpp"
#include "XosDebug.hpp"

#if defined(c_NAMESPACE)
namespace c_NAMESPACE {
#endif // defined(c_NAMESPACE) 

typedef XosWebRtcClientBaseWindowImplement XosWebRtcClientConsoleBaseWindowImplement;
typedef XosWebRtcClientBaseWindow XosWebRtcClientConsoleBaseWindowExtend;
///////////////////////////////////////////////////////////////////////
///  Class: XosWebRtcClientConsoleBaseWindow
///
/// Author: $author$
///   Date: 12/29/2012
///////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS XosWebRtcClientConsoleBaseWindow
: virtual public XosWebRtcClientConsoleBaseWindowImplement,
  public XosWebRtcClientConsoleBaseWindowExtend
{
public:
    typedef XosWebRtcClientConsoleBaseWindowImplement Implements;
    typedef XosWebRtcClientConsoleBaseWindowExtend Extends;

    XosWebRtcClientConsoleBaseWindowUIMessageThread m_msgThread;

    ///////////////////////////////////////////////////////////////////////
    ///  Constructor: XosWebRtcClientConsoleBaseWindow
    ///
    ///       Author: $author$
    ///         Date: 12/29/2012
    ///////////////////////////////////////////////////////////////////////
    XosWebRtcClientConsoleBaseWindow
    (const char* serverName, int serverPort,
     bool showConnectionState=XOSWEBRTCCLIENTBASEWINDOW_DEFAULT_SHOW_CONNECTION_STATE,
     bool handleButtonEvents=XOSWEBRTCCLIENTBASEWINDOW_DEFAULT_HANDLE_BUTTON_EVENTS)
    : Extends(serverName, serverPort, showConnectionState, handleButtonEvents)
    {
        m_useUIMessageQueue = true;
        m_useOpenGLRenderer = false;
        m_autoConnectToPeerOn = true;
        m_autoConnectToPeerAfterOn = true;
    }
    ///////////////////////////////////////////////////////////////////////
    ///  Destructor: ~XosWebRtcClientConsoleBaseWindow
    ///
    ///      Author: $author$
    ///        Date: 12/29/2012
    ///////////////////////////////////////////////////////////////////////
    virtual ~XosWebRtcClientConsoleBaseWindow()
    {
    }

    virtual void PostUIThreadMessage
    (UIMessageThreadId tid, int msg_id, int id, void* data)
    {
        if ((tid)) {
            if ((m_useUIMessageQueue))
                tid->PostUIQueueMessage(msg_id, id, data);
            else
            tid->PostUIThreadMessage(msg_id, id, data);
        }
    }
    virtual bool CreateUIMessageThread()
    {
        bool isSuccess = false;
        if ((isSuccess = InitUIMessageQueue()))
        if (!(isSuccess = m_msgThread.CreateMessageThread(this)))
            FinishUIMessageQueue();
        return isSuccess;
    }
    virtual bool DestroyUIMessageThread()
    {
        bool isSuccess = m_msgThread.DestroyMessageThread();
        if (!(FinishUIMessageQueue()))
            isSuccess = false;
        return isSuccess;
    }
    virtual UIMessageThreadId GetUIMessageThreadId()
    {
        return &m_msgThread;
    }

    virtual void OnEvent(const std::string& eventName) 
    { XOS_DBT(("(%s)...\n", eventName.c_str())); }
};


#if defined(c_NAMESPACE)
}
#endif // defined(c_NAMESPACE) 

#endif // _XOSWEBRTCCLIENTCONSOLEBASEWINDOW_HPP 
        

